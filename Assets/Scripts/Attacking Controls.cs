//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Attacking Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AttackingControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AttackingControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Attacking Controls"",
    ""maps"": [
        {
            ""name"": ""Player Attack"",
            ""id"": ""248431c2-bb78-46a3-9a54-682d60a72df8"",
            ""actions"": [
                {
                    ""name"": ""Basic Attack 1"",
                    ""type"": ""Button"",
                    ""id"": ""3a2568f6-5b80-49ce-9890-e3ce08c61223"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""faa47e79-4f58-4722-8b40-6a87206fb26f"",
                    ""path"": ""<Keyboard>/#(F)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Basic Attack 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Attack
        m_PlayerAttack = asset.FindActionMap("Player Attack", throwIfNotFound: true);
        m_PlayerAttack_BasicAttack1 = m_PlayerAttack.FindAction("Basic Attack 1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Attack
    private readonly InputActionMap m_PlayerAttack;
    private IPlayerAttackActions m_PlayerAttackActionsCallbackInterface;
    private readonly InputAction m_PlayerAttack_BasicAttack1;
    public struct PlayerAttackActions
    {
        private @AttackingControls m_Wrapper;
        public PlayerAttackActions(@AttackingControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BasicAttack1 => m_Wrapper.m_PlayerAttack_BasicAttack1;
        public InputActionMap Get() { return m_Wrapper.m_PlayerAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerAttackActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerAttackActions instance)
        {
            if (m_Wrapper.m_PlayerAttackActionsCallbackInterface != null)
            {
                @BasicAttack1.started -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnBasicAttack1;
                @BasicAttack1.performed -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnBasicAttack1;
                @BasicAttack1.canceled -= m_Wrapper.m_PlayerAttackActionsCallbackInterface.OnBasicAttack1;
            }
            m_Wrapper.m_PlayerAttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BasicAttack1.started += instance.OnBasicAttack1;
                @BasicAttack1.performed += instance.OnBasicAttack1;
                @BasicAttack1.canceled += instance.OnBasicAttack1;
            }
        }
    }
    public PlayerAttackActions @PlayerAttack => new PlayerAttackActions(this);
    public interface IPlayerAttackActions
    {
        void OnBasicAttack1(InputAction.CallbackContext context);
    }
}
