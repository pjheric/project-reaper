//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/InputSystem/Attacking Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AttackingControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AttackingControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Attacking Controls"",
    ""maps"": [
        {
            ""name"": ""GangLimAttack"",
            ""id"": ""248431c2-bb78-46a3-9a54-682d60a72df8"",
            ""actions"": [
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""3a2568f6-5b80-49ce-9890-e3ce08c61223"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""faa47e79-4f58-4722-8b40-6a87206fb26f"",
                    ""path"": ""<Keyboard>/#(F)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef2c4f60-812d-4006-bbe0-3cfe55389a2a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MorriganAttack"",
            ""id"": ""77245e4c-b785-4f73-8c60-4597920c9d77"",
            ""actions"": [
                {
                    ""name"": ""BasicAttack"",
                    ""type"": ""Button"",
                    ""id"": ""dd92bf82-b7d8-426c-8edf-a8f39826b686"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""abb1e18d-c78d-49a4-af5b-4f1e3353dcc3"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GangLimAttack
        m_GangLimAttack = asset.FindActionMap("GangLimAttack", throwIfNotFound: true);
        m_GangLimAttack_BasicAttack = m_GangLimAttack.FindAction("BasicAttack", throwIfNotFound: true);
        // MorriganAttack
        m_MorriganAttack = asset.FindActionMap("MorriganAttack", throwIfNotFound: true);
        m_MorriganAttack_BasicAttack = m_MorriganAttack.FindAction("BasicAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GangLimAttack
    private readonly InputActionMap m_GangLimAttack;
    private IGangLimAttackActions m_GangLimAttackActionsCallbackInterface;
    private readonly InputAction m_GangLimAttack_BasicAttack;
    public struct GangLimAttackActions
    {
        private @AttackingControls m_Wrapper;
        public GangLimAttackActions(@AttackingControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BasicAttack => m_Wrapper.m_GangLimAttack_BasicAttack;
        public InputActionMap Get() { return m_Wrapper.m_GangLimAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GangLimAttackActions set) { return set.Get(); }
        public void SetCallbacks(IGangLimAttackActions instance)
        {
            if (m_Wrapper.m_GangLimAttackActionsCallbackInterface != null)
            {
                @BasicAttack.started -= m_Wrapper.m_GangLimAttackActionsCallbackInterface.OnBasicAttack;
                @BasicAttack.performed -= m_Wrapper.m_GangLimAttackActionsCallbackInterface.OnBasicAttack;
                @BasicAttack.canceled -= m_Wrapper.m_GangLimAttackActionsCallbackInterface.OnBasicAttack;
            }
            m_Wrapper.m_GangLimAttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BasicAttack.started += instance.OnBasicAttack;
                @BasicAttack.performed += instance.OnBasicAttack;
                @BasicAttack.canceled += instance.OnBasicAttack;
            }
        }
    }
    public GangLimAttackActions @GangLimAttack => new GangLimAttackActions(this);

    // MorriganAttack
    private readonly InputActionMap m_MorriganAttack;
    private IMorriganAttackActions m_MorriganAttackActionsCallbackInterface;
    private readonly InputAction m_MorriganAttack_BasicAttack;
    public struct MorriganAttackActions
    {
        private @AttackingControls m_Wrapper;
        public MorriganAttackActions(@AttackingControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BasicAttack => m_Wrapper.m_MorriganAttack_BasicAttack;
        public InputActionMap Get() { return m_Wrapper.m_MorriganAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MorriganAttackActions set) { return set.Get(); }
        public void SetCallbacks(IMorriganAttackActions instance)
        {
            if (m_Wrapper.m_MorriganAttackActionsCallbackInterface != null)
            {
                @BasicAttack.started -= m_Wrapper.m_MorriganAttackActionsCallbackInterface.OnBasicAttack;
                @BasicAttack.performed -= m_Wrapper.m_MorriganAttackActionsCallbackInterface.OnBasicAttack;
                @BasicAttack.canceled -= m_Wrapper.m_MorriganAttackActionsCallbackInterface.OnBasicAttack;
            }
            m_Wrapper.m_MorriganAttackActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BasicAttack.started += instance.OnBasicAttack;
                @BasicAttack.performed += instance.OnBasicAttack;
                @BasicAttack.canceled += instance.OnBasicAttack;
            }
        }
    }
    public MorriganAttackActions @MorriganAttack => new MorriganAttackActions(this);
    public interface IGangLimAttackActions
    {
        void OnBasicAttack(InputAction.CallbackContext context);
    }
    public interface IMorriganAttackActions
    {
        void OnBasicAttack(InputAction.CallbackContext context);
    }
}
